<?php

/*
 * This file is part of sad_spirit/pg_gateway:
 * Table Data Gateway for Postgres - auto-converts types, allows raw SQL, supports joins between gateways
 *
 * (c) Alexey Borzov <avb@php.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace sad_spirit\pg_gateway;

use sad_spirit\pg_builder\SelectCommon;
use sad_spirit\pg_wrapper\Result;

/**
 * Interface for table data gateways
 *
 * @psalm-type FragmentsInput = null|Fragment|FragmentBuilder|iterable<Fragment|FragmentBuilder>|\Closure(builders\FragmentListBuilder)
 */
interface TableGateway extends TableAccessor
{
    /**
     * Default alias for table accessed via TableGateway
     */
    public const ALIAS_SELF = 'self';
    /**
     * Default alias for a table being joined, used in join conditions
     */
    public const ALIAS_JOINED = 'joined';

    /**
     * Generates a DELETE statement using given fragments and executes it with given parameters
     *
     * @param FragmentsInput $fragments
     * @param array<string, mixed> $parameters
     */
    public function delete(
        null|iterable|\Closure|Fragment|FragmentBuilder $fragments = null,
        array $parameters = []
    ): Result;

    /**
     * Generates an INSERT statement for the given values using given fragments and executes it with given parameters
     *
     * @param array<string, mixed>|SelectCommon|SelectBuilder $values This is either an array with table columns' values
     *                                                  or a SELECT statement that is used directly for the $values
     *                                                  property of Insert object being created
     *                                                  or a proxy for SELECT statement generated by another Gateway
     * @param FragmentsInput $fragments INSERT statements may have e.g. RETURNING and WITH clauses added via fragments
     * @param array<string, mixed> $parameters
     */
    public function insert(
        array|SelectCommon|SelectBuilder $values,
        null|iterable|\Closure|Fragment|FragmentBuilder $fragments = null,
        array $parameters = []
    ): Result;

    /**
     * Returns an object that can execute SELECT / SELECT COUNT(*) queries using given fragments with given parameters
     *
     * @param FragmentsInput $fragments
     * @param array<string, mixed> $parameters
     */
    public function select(
        null|iterable|\Closure|Fragment|FragmentBuilder $fragments = null,
        array $parameters = []
    ): SelectProxy;

    /**
     * Generates an UPDATE statement for the given columns using given fragments and executes it with given parameters
     *
     * @param array<string, mixed> $set New values for columns. The array may have instances of Expression or
     *                                  Nodes implementing ScalarExpression as values, those will be directly
     *                                  inserted into generated SQL
     * @param FragmentsInput $fragments
     * @param array<string, mixed> $parameters
     */
    public function update(
        array $set,
        null|iterable|\Closure|Fragment|FragmentBuilder $fragments = null,
        array $parameters = []
    ): Result;
}
