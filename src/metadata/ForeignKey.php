<?php

/*
 * This file is part of sad_spirit/pg_gateway:
 * Table Data Gateway for Postgres - auto-converts types, allows raw SQL, supports joins between gateways
 *
 * (c) Alexey Borzov <avb@php.net>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace sad_spirit\pg_gateway\metadata;

/**
 * Represents information about a FOREIGN KEY (referential integrity constraint) in the DB
 *
 * @implements \IteratorAggregate<string, string>
 */
final readonly class ForeignKey implements \IteratorAggregate
{
    /**
     * @param TableName $childTable        Name of the child table
     *                                     (the one to which the FOREIGN KEY constraint was added)
     * @param string[]  $childColumns      Names of the columns in the child table
     * @param TableName $referencedTable   Name of the referenced / parent table
     *                                     (the one mentioned in the REFERENCES clause of FOREIGN KEY)
     * @param string[]  $referencedColumns Names of the columns in the referenced table
     * @param string    $constraintName    Name of the FOREIGN KEY constraint (always available,
     *                                     autogenerated by Postgres if not given explicitly)
     */
    public function __construct(
        public TableName $childTable,
        public array $childColumns,
        public TableName $referencedTable,
        public array $referencedColumns,
        public string $constraintName
    ) {
    }

    /**
     * Returns the name of the child table (the one to which the FOREIGN KEY constraint was added)
     *
     * @deprecated Since 0.10.0: use {@see $childTable} property
     */
    public function getChildTable(): TableName
    {
        @\trigger_error(\sprintf(
            'The "%s()" method is deprecated since release 0.10.0, '
            . 'use $childTable property instead.',
            __METHOD__
        ), \E_USER_DEPRECATED);
        return $this->childTable;
    }

    /**
     * Returns the name of the referenced / parent table (the one mentioned in the REFERENCES clause of FOREIGN KEY)
     *
     * @deprecated Since 0.10.0: use {@see $referencedTable} property
     */
    public function getReferencedTable(): TableName
    {
        @\trigger_error(\sprintf(
            'The "%s()" method is deprecated since release 0.10.0, '
            . 'use $referencedTable property instead.',
            __METHOD__
        ), \E_USER_DEPRECATED);
        return $this->referencedTable;
    }

    /**
     * Returns the names of the columns in the child table
     *
     * @return string[]
     *
     * @deprecated Since 0.10.0: use {@see $childColumns} property
     */
    public function getChildColumns(): array
    {
        @\trigger_error(\sprintf(
            'The "%s()" method is deprecated since release 0.10.0, '
            . 'use $childColumns property instead.',
            __METHOD__
        ), \E_USER_DEPRECATED);
        return $this->childColumns;
    }

    /**
     * Returns the names of the columns in the referenced table
     *
     * @return string[]
     *
     * @deprecated Since 0.10.0: use {@see $referencedColumns} property
     */
    public function getReferencedColumns(): array
    {
        @\trigger_error(\sprintf(
            'The "%s()" method is deprecated since release 0.10.0, '
            . 'use $referencedColumns property instead.',
            __METHOD__
        ), \E_USER_DEPRECATED);
        return $this->referencedColumns;
    }

    /**
     * Returns the name of the FOREIGN KEY constraint
     *
     * The name is always available, autogenerated by Postgres if not given explicitly.
     *
     * @deprecated Since 0.10.0: use {@see $constraintName} property
     */
    public function getConstraintName(): string
    {
        @\trigger_error(\sprintf(
            'The "%s()" method is deprecated since release 0.10.0, '
            . 'use $constraintName property instead.',
            __METHOD__
        ), \E_USER_DEPRECATED);
        return $this->constraintName;
    }

    /**
     * {@inheritDoc}
     *
     * Iterates over a mapping ['child column' => 'referenced column']
     *
     * @return \ArrayIterator<string, string>
     */
    public function getIterator(): \ArrayIterator
    {
        return new \ArrayIterator(\array_combine($this->childColumns, $this->referencedColumns));
    }

    /**
     * Returns whether a foreign key is recursive, i.e. refers back to the same table
     */
    public function isRecursive(): bool
    {
        return $this->childTable->equals($this->referencedTable);
    }
}
